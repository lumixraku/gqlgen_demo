// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	time "time"
)

type AggregateSite struct {
	Count int `json:"count"`
}

type Convert struct {
	ID                 string     `json:"id"`
	AdvertiserID       *int       `json:"advertiserID"`
	AppID              *string    `json:"appId"`
	ConvertAttribution *int       `json:"convertAttribution"`
	ConvertDataType    *int       `json:"convertDataType"`
	ConvertItunesID    *int       `json:"convertItunesId"`
	ConvertPackageName *string    `json:"convertPackageName"`
	ConvertStatus      *int       `json:"convertStatus"`
	ConvertType        *int       `json:"convertType"`
	ConvertValue       *int       `json:"convertValue"`
	ConvertXpathURL    *string    `json:"convertXpathUrl"`
	ConvertXpathValue  *string    `json:"convertXpathValue"`
	CreateChannel      *int       `json:"createChannel"`
	CreateTime         *time.Time `json:"createTime"`
	Data               *string    `json:"data"`
	DownloadURLStatus  *int       `json:"downloadUrlStatus"`
	ExternalAction     *int       `json:"externalAction"`
	ExternalActions    *string    `json:"externalActions"`
	Name               string     `json:"name"`
	Status             *int       `json:"status"`
	StatusModifyTime   *int       `json:"statusModifyTime"`
}

func (Convert) IsNode() {}

type ConvertConnection struct {
	Edges     []ConvertEdge `json:"edges"`
	PageInfo  PageInfo      `json:"pageInfo"`
	Aggregate AggregateSite `json:"aggregate"`
}

type ConvertEdge struct {
	Node   Convert `json:"node"`
	Cursor string  `json:"cursor"`
}

type ConvertInput interface {
	IsConvertInput()
}

type JSConvert struct {
	Name           string          `json:"name"`
	ExternalAction *ExternalAction `json:"externalAction"`
}

type Node interface {
	IsNode()
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type Site struct {
	ID       string    `json:"id"`
	URL      string    `json:"url"`
	Name     string    `json:"name"`
	Image    string    `json:"image"`
	CreateAt time.Time `json:"createAt"`
}

func (Site) IsNode() {}

type SiteEdge struct {
	Node   Site   `json:"node"`
	Cursor string `json:"cursor"`
}

type User struct {
	ID           string `json:"id"`
	AdvertiserID string `json:"advertiserID"`
}

type ExternalAction string

const (
	ExternalActionPhone          ExternalAction = "Phone"
	ExternalActionForm           ExternalAction = "Form"
	ExternalActionMapSearch      ExternalAction = "MapSearch"
	ExternalActionDownloadFinish ExternalAction = "DownloadFinish"
	ExternalActionButton         ExternalAction = "Button"
	ExternalActionXpath          ExternalAction = "Xpath"
	ExternalActionView           ExternalAction = "View"
	ExternalActionActive         ExternalAction = "Active"
	ExternalActionDownloadStart  ExternalAction = "DownloadStart"
	ExternalActionQq             ExternalAction = "QQ"
	ExternalActionLottery        ExternalAction = "Lottery"
	ExternalActionVote           ExternalAction = "Vote"
)

func (e ExternalAction) IsValid() bool {
	switch e {
	case ExternalActionPhone, ExternalActionForm, ExternalActionMapSearch, ExternalActionDownloadFinish, ExternalActionButton, ExternalActionXpath, ExternalActionView, ExternalActionActive, ExternalActionDownloadStart, ExternalActionQq, ExternalActionLottery, ExternalActionVote:
		return true
	}
	return false
}

func (e ExternalAction) String() string {
	return string(e)
}

func (e *ExternalAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExternalAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExternalAction", str)
	}
	return nil
}

func (e ExternalAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SiteType string

const (
	SiteTypeTetris SiteType = "TETRIS"
	SiteTypeTemai  SiteType = "TEMAI"
)

func (e SiteType) IsValid() bool {
	switch e {
	case SiteTypeTetris, SiteTypeTemai:
		return true
	}
	return false
}

func (e SiteType) String() string {
	return string(e)
}

func (e *SiteType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SiteType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SiteType", str)
	}
	return nil
}

func (e SiteType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
