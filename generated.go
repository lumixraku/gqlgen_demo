// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"
	sync "sync"
	time "time"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AggregateConvert struct {
		Count func(childComplexity int) int
	}

	AppConvert struct {
		Id                 func(childComplexity int) int
		AdvertiserId       func(childComplexity int) int
		AppId              func(childComplexity int) int
		ConvertAttribution func(childComplexity int) int
		ConvertDataType    func(childComplexity int) int
		ConvertItunesId    func(childComplexity int) int
		ConvertPackageName func(childComplexity int) int
		ConvertStatus      func(childComplexity int) int
		ConvertType        func(childComplexity int) int
		ConvertValue       func(childComplexity int) int
		CreateChannel      func(childComplexity int) int
		CreateTime         func(childComplexity int) int
		Data               func(childComplexity int) int
		DownloadUrlStatus  func(childComplexity int) int
		ExternalAction     func(childComplexity int) int
		ExternalActions    func(childComplexity int) int
		Name               func(childComplexity int) int
		Status             func(childComplexity int) int
		StatusModifyTime   func(childComplexity int) int
	}

	Convert struct {
		Id                 func(childComplexity int) int
		AdvertiserId       func(childComplexity int) int
		ConvertAttribution func(childComplexity int) int
		ConvertDataType    func(childComplexity int) int
		ConvertStatus      func(childComplexity int) int
		ConvertType        func(childComplexity int) int
		ConvertValue       func(childComplexity int) int
		CreateChannel      func(childComplexity int) int
		CreateTime         func(childComplexity int) int
		Data               func(childComplexity int) int
		ExternalAction     func(childComplexity int) int
		ExternalActions    func(childComplexity int) int
		Name               func(childComplexity int) int
		Status             func(childComplexity int) int
		StatusModifyTime   func(childComplexity int) int
	}

	ConvertConnection struct {
		Edges     func(childComplexity int) int
		PageInfo  func(childComplexity int) int
		Aggregate func(childComplexity int) int
	}

	ConvertEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	Mutation struct {
		CreateJsconvert func(childComplexity int, input *JSCreateInput) int
		UpdateJsconvert func(childComplexity int, input *JSUpdateInput, where *ConvertWhereInput) int
		DeleteJsconvert func(childComplexity int, where *ConvertWhereInput) int
	}

	PageInfo struct {
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
		EndCursor       func(childComplexity int) int
	}

	Query struct {
		Converts func(childComplexity int, where *ConvertWhereInput, orderBy *ConvertOrderByInput, skip *int, after *string, before *string, first *int, last *int) int
	}

	User struct {
		Id           func(childComplexity int) int
		AdvertiserId func(childComplexity int) int
	}

	XpathConvert struct {
		Id                 func(childComplexity int) int
		AdvertiserId       func(childComplexity int) int
		ConvertAttribution func(childComplexity int) int
		ConvertDataType    func(childComplexity int) int
		ConvertStatus      func(childComplexity int) int
		ConvertType        func(childComplexity int) int
		ConvertValue       func(childComplexity int) int
		ConvertXpathUrl    func(childComplexity int) int
		ConvertXpathValue  func(childComplexity int) int
		CreateChannel      func(childComplexity int) int
		CreateTime         func(childComplexity int) int
		Data               func(childComplexity int) int
		ExternalAction     func(childComplexity int) int
		ExternalActions    func(childComplexity int) int
		Name               func(childComplexity int) int
		Status             func(childComplexity int) int
		StatusModifyTime   func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateJSConvert(ctx context.Context, input *JSCreateInput) (Convert, error)
	UpdateJSConvert(ctx context.Context, input *JSUpdateInput, where *ConvertWhereInput) (Convert, error)
	DeleteJSConvert(ctx context.Context, where *ConvertWhereInput) (*Convert, error)
}
type QueryResolver interface {
	Converts(ctx context.Context, where *ConvertWhereInput, orderBy *ConvertOrderByInput, skip *int, after *string, before *string, first *int, last *int) (ConvertConnection, error)
}

func field_Mutation_createJSConvert_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *JSCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var ptr1 JSCreateInput
		if tmp != nil {
			ptr1, err = UnmarshalJSCreateInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Mutation_updateJSConvert_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *JSUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var ptr1 JSUpdateInput
		if tmp != nil {
			ptr1, err = UnmarshalJSUpdateInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *ConvertWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		var err error
		var ptr1 ConvertWhereInput
		if tmp != nil {
			ptr1, err = UnmarshalConvertWhereInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	return args, nil

}

func field_Mutation_deleteJSConvert_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *ConvertWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		var err error
		var ptr1 ConvertWhereInput
		if tmp != nil {
			ptr1, err = UnmarshalConvertWhereInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil

}

func field_Query_converts_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *ConvertWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		var err error
		var ptr1 ConvertWhereInput
		if tmp != nil {
			ptr1, err = UnmarshalConvertWhereInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	var arg1 *ConvertOrderByInput
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		var ptr1 ConvertOrderByInput
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["skip"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg6
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "AggregateConvert.count":
		if e.complexity.AggregateConvert.Count == nil {
			break
		}

		return e.complexity.AggregateConvert.Count(childComplexity), true

	case "AppConvert.id":
		if e.complexity.AppConvert.Id == nil {
			break
		}

		return e.complexity.AppConvert.Id(childComplexity), true

	case "AppConvert.advertiserID":
		if e.complexity.AppConvert.AdvertiserId == nil {
			break
		}

		return e.complexity.AppConvert.AdvertiserId(childComplexity), true

	case "AppConvert.appId":
		if e.complexity.AppConvert.AppId == nil {
			break
		}

		return e.complexity.AppConvert.AppId(childComplexity), true

	case "AppConvert.convertAttribution":
		if e.complexity.AppConvert.ConvertAttribution == nil {
			break
		}

		return e.complexity.AppConvert.ConvertAttribution(childComplexity), true

	case "AppConvert.convertDataType":
		if e.complexity.AppConvert.ConvertDataType == nil {
			break
		}

		return e.complexity.AppConvert.ConvertDataType(childComplexity), true

	case "AppConvert.convertItunesId":
		if e.complexity.AppConvert.ConvertItunesId == nil {
			break
		}

		return e.complexity.AppConvert.ConvertItunesId(childComplexity), true

	case "AppConvert.convertPackageName":
		if e.complexity.AppConvert.ConvertPackageName == nil {
			break
		}

		return e.complexity.AppConvert.ConvertPackageName(childComplexity), true

	case "AppConvert.convertStatus":
		if e.complexity.AppConvert.ConvertStatus == nil {
			break
		}

		return e.complexity.AppConvert.ConvertStatus(childComplexity), true

	case "AppConvert.convertType":
		if e.complexity.AppConvert.ConvertType == nil {
			break
		}

		return e.complexity.AppConvert.ConvertType(childComplexity), true

	case "AppConvert.convertValue":
		if e.complexity.AppConvert.ConvertValue == nil {
			break
		}

		return e.complexity.AppConvert.ConvertValue(childComplexity), true

	case "AppConvert.createChannel":
		if e.complexity.AppConvert.CreateChannel == nil {
			break
		}

		return e.complexity.AppConvert.CreateChannel(childComplexity), true

	case "AppConvert.createTime":
		if e.complexity.AppConvert.CreateTime == nil {
			break
		}

		return e.complexity.AppConvert.CreateTime(childComplexity), true

	case "AppConvert.data":
		if e.complexity.AppConvert.Data == nil {
			break
		}

		return e.complexity.AppConvert.Data(childComplexity), true

	case "AppConvert.downloadUrlStatus":
		if e.complexity.AppConvert.DownloadUrlStatus == nil {
			break
		}

		return e.complexity.AppConvert.DownloadUrlStatus(childComplexity), true

	case "AppConvert.externalAction":
		if e.complexity.AppConvert.ExternalAction == nil {
			break
		}

		return e.complexity.AppConvert.ExternalAction(childComplexity), true

	case "AppConvert.externalActions":
		if e.complexity.AppConvert.ExternalActions == nil {
			break
		}

		return e.complexity.AppConvert.ExternalActions(childComplexity), true

	case "AppConvert.name":
		if e.complexity.AppConvert.Name == nil {
			break
		}

		return e.complexity.AppConvert.Name(childComplexity), true

	case "AppConvert.status":
		if e.complexity.AppConvert.Status == nil {
			break
		}

		return e.complexity.AppConvert.Status(childComplexity), true

	case "AppConvert.statusModifyTime":
		if e.complexity.AppConvert.StatusModifyTime == nil {
			break
		}

		return e.complexity.AppConvert.StatusModifyTime(childComplexity), true

	case "Convert.id":
		if e.complexity.Convert.Id == nil {
			break
		}

		return e.complexity.Convert.Id(childComplexity), true

	case "Convert.advertiserId":
		if e.complexity.Convert.AdvertiserId == nil {
			break
		}

		return e.complexity.Convert.AdvertiserId(childComplexity), true

	case "Convert.convertAttribution":
		if e.complexity.Convert.ConvertAttribution == nil {
			break
		}

		return e.complexity.Convert.ConvertAttribution(childComplexity), true

	case "Convert.convertDataType":
		if e.complexity.Convert.ConvertDataType == nil {
			break
		}

		return e.complexity.Convert.ConvertDataType(childComplexity), true

	case "Convert.convertStatus":
		if e.complexity.Convert.ConvertStatus == nil {
			break
		}

		return e.complexity.Convert.ConvertStatus(childComplexity), true

	case "Convert.convertType":
		if e.complexity.Convert.ConvertType == nil {
			break
		}

		return e.complexity.Convert.ConvertType(childComplexity), true

	case "Convert.convertValue":
		if e.complexity.Convert.ConvertValue == nil {
			break
		}

		return e.complexity.Convert.ConvertValue(childComplexity), true

	case "Convert.createChannel":
		if e.complexity.Convert.CreateChannel == nil {
			break
		}

		return e.complexity.Convert.CreateChannel(childComplexity), true

	case "Convert.createTime":
		if e.complexity.Convert.CreateTime == nil {
			break
		}

		return e.complexity.Convert.CreateTime(childComplexity), true

	case "Convert.data":
		if e.complexity.Convert.Data == nil {
			break
		}

		return e.complexity.Convert.Data(childComplexity), true

	case "Convert.externalAction":
		if e.complexity.Convert.ExternalAction == nil {
			break
		}

		return e.complexity.Convert.ExternalAction(childComplexity), true

	case "Convert.externalActions":
		if e.complexity.Convert.ExternalActions == nil {
			break
		}

		return e.complexity.Convert.ExternalActions(childComplexity), true

	case "Convert.name":
		if e.complexity.Convert.Name == nil {
			break
		}

		return e.complexity.Convert.Name(childComplexity), true

	case "Convert.status":
		if e.complexity.Convert.Status == nil {
			break
		}

		return e.complexity.Convert.Status(childComplexity), true

	case "Convert.statusModifyTime":
		if e.complexity.Convert.StatusModifyTime == nil {
			break
		}

		return e.complexity.Convert.StatusModifyTime(childComplexity), true

	case "ConvertConnection.edges":
		if e.complexity.ConvertConnection.Edges == nil {
			break
		}

		return e.complexity.ConvertConnection.Edges(childComplexity), true

	case "ConvertConnection.pageInfo":
		if e.complexity.ConvertConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConvertConnection.PageInfo(childComplexity), true

	case "ConvertConnection.aggregate":
		if e.complexity.ConvertConnection.Aggregate == nil {
			break
		}

		return e.complexity.ConvertConnection.Aggregate(childComplexity), true

	case "ConvertEdge.node":
		if e.complexity.ConvertEdge.Node == nil {
			break
		}

		return e.complexity.ConvertEdge.Node(childComplexity), true

	case "ConvertEdge.cursor":
		if e.complexity.ConvertEdge.Cursor == nil {
			break
		}

		return e.complexity.ConvertEdge.Cursor(childComplexity), true

	case "Mutation.createJSConvert":
		if e.complexity.Mutation.CreateJsconvert == nil {
			break
		}

		args, err := field_Mutation_createJSConvert_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJsconvert(childComplexity, args["input"].(*JSCreateInput)), true

	case "Mutation.updateJSConvert":
		if e.complexity.Mutation.UpdateJsconvert == nil {
			break
		}

		args, err := field_Mutation_updateJSConvert_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJsconvert(childComplexity, args["input"].(*JSUpdateInput), args["where"].(*ConvertWhereInput)), true

	case "Mutation.deleteJSConvert":
		if e.complexity.Mutation.DeleteJsconvert == nil {
			break
		}

		args, err := field_Mutation_deleteJSConvert_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJsconvert(childComplexity, args["where"].(*ConvertWhereInput)), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "Query.converts":
		if e.complexity.Query.Converts == nil {
			break
		}

		args, err := field_Query_converts_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Converts(childComplexity, args["where"].(*ConvertWhereInput), args["orderBy"].(*ConvertOrderByInput), args["skip"].(*int), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "User.id":
		if e.complexity.User.Id == nil {
			break
		}

		return e.complexity.User.Id(childComplexity), true

	case "User.advertiserID":
		if e.complexity.User.AdvertiserId == nil {
			break
		}

		return e.complexity.User.AdvertiserId(childComplexity), true

	case "XpathConvert.id":
		if e.complexity.XpathConvert.Id == nil {
			break
		}

		return e.complexity.XpathConvert.Id(childComplexity), true

	case "XpathConvert.advertiserID":
		if e.complexity.XpathConvert.AdvertiserId == nil {
			break
		}

		return e.complexity.XpathConvert.AdvertiserId(childComplexity), true

	case "XpathConvert.convertAttribution":
		if e.complexity.XpathConvert.ConvertAttribution == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertAttribution(childComplexity), true

	case "XpathConvert.convertDataType":
		if e.complexity.XpathConvert.ConvertDataType == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertDataType(childComplexity), true

	case "XpathConvert.convertStatus":
		if e.complexity.XpathConvert.ConvertStatus == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertStatus(childComplexity), true

	case "XpathConvert.convertType":
		if e.complexity.XpathConvert.ConvertType == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertType(childComplexity), true

	case "XpathConvert.convertValue":
		if e.complexity.XpathConvert.ConvertValue == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertValue(childComplexity), true

	case "XpathConvert.convertXpathUrl":
		if e.complexity.XpathConvert.ConvertXpathUrl == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertXpathUrl(childComplexity), true

	case "XpathConvert.convertXpathValue":
		if e.complexity.XpathConvert.ConvertXpathValue == nil {
			break
		}

		return e.complexity.XpathConvert.ConvertXpathValue(childComplexity), true

	case "XpathConvert.createChannel":
		if e.complexity.XpathConvert.CreateChannel == nil {
			break
		}

		return e.complexity.XpathConvert.CreateChannel(childComplexity), true

	case "XpathConvert.createTime":
		if e.complexity.XpathConvert.CreateTime == nil {
			break
		}

		return e.complexity.XpathConvert.CreateTime(childComplexity), true

	case "XpathConvert.data":
		if e.complexity.XpathConvert.Data == nil {
			break
		}

		return e.complexity.XpathConvert.Data(childComplexity), true

	case "XpathConvert.externalAction":
		if e.complexity.XpathConvert.ExternalAction == nil {
			break
		}

		return e.complexity.XpathConvert.ExternalAction(childComplexity), true

	case "XpathConvert.externalActions":
		if e.complexity.XpathConvert.ExternalActions == nil {
			break
		}

		return e.complexity.XpathConvert.ExternalActions(childComplexity), true

	case "XpathConvert.name":
		if e.complexity.XpathConvert.Name == nil {
			break
		}

		return e.complexity.XpathConvert.Name(childComplexity), true

	case "XpathConvert.status":
		if e.complexity.XpathConvert.Status == nil {
			break
		}

		return e.complexity.XpathConvert.Status(childComplexity), true

	case "XpathConvert.statusModifyTime":
		if e.complexity.XpathConvert.StatusModifyTime == nil {
			break
		}

		return e.complexity.XpathConvert.StatusModifyTime(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var aggregateConvertImplementors = []string{"AggregateConvert"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AggregateConvert(ctx context.Context, sel ast.SelectionSet, obj *AggregateConvert) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, aggregateConvertImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregateConvert")
		case "count":
			out.Values[i] = ec._AggregateConvert_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AggregateConvert_count(ctx context.Context, field graphql.CollectedField, obj *AggregateConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AggregateConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var appConvertImplementors = []string{"AppConvert", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AppConvert(ctx context.Context, sel ast.SelectionSet, obj *AppConvert) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, appConvertImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppConvert")
		case "id":
			out.Values[i] = ec._AppConvert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "advertiserID":
			out.Values[i] = ec._AppConvert_advertiserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "appId":
			out.Values[i] = ec._AppConvert_appId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertAttribution":
			out.Values[i] = ec._AppConvert_convertAttribution(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertDataType":
			out.Values[i] = ec._AppConvert_convertDataType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertItunesId":
			out.Values[i] = ec._AppConvert_convertItunesId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertPackageName":
			out.Values[i] = ec._AppConvert_convertPackageName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertStatus":
			out.Values[i] = ec._AppConvert_convertStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertType":
			out.Values[i] = ec._AppConvert_convertType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertValue":
			out.Values[i] = ec._AppConvert_convertValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createChannel":
			out.Values[i] = ec._AppConvert_createChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createTime":
			out.Values[i] = ec._AppConvert_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "data":
			out.Values[i] = ec._AppConvert_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "downloadUrlStatus":
			out.Values[i] = ec._AppConvert_downloadUrlStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalAction":
			out.Values[i] = ec._AppConvert_externalAction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalActions":
			out.Values[i] = ec._AppConvert_externalActions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._AppConvert_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._AppConvert_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "statusModifyTime":
			out.Values[i] = ec._AppConvert_statusModifyTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_id(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_advertiserID(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertiserID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_appId(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertAttribution(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertAttribution, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertDataType(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertDataType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertItunesId(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertItunesID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertPackageName(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertPackageName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertStatus(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertType(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_convertValue(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_createChannel(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateChannel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_createTime(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_data(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_downloadUrlStatus(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DownloadURLStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_externalAction(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalAction, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ExternalAction)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return res
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_externalActions(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalActions, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_name(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_status(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _AppConvert_statusModifyTime(ctx context.Context, field graphql.CollectedField, obj *AppConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "AppConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusModifyTime, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var convertImplementors = []string{"Convert", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Convert(ctx context.Context, sel ast.SelectionSet, obj *Convert) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, convertImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Convert")
		case "id":
			out.Values[i] = ec._Convert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "advertiserId":
			out.Values[i] = ec._Convert_advertiserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertAttribution":
			out.Values[i] = ec._Convert_convertAttribution(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertDataType":
			out.Values[i] = ec._Convert_convertDataType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertStatus":
			out.Values[i] = ec._Convert_convertStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertType":
			out.Values[i] = ec._Convert_convertType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertValue":
			out.Values[i] = ec._Convert_convertValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createChannel":
			out.Values[i] = ec._Convert_createChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createTime":
			out.Values[i] = ec._Convert_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "data":
			out.Values[i] = ec._Convert_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalAction":
			out.Values[i] = ec._Convert_externalAction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalActions":
			out.Values[i] = ec._Convert_externalActions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._Convert_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._Convert_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "statusModifyTime":
			out.Values[i] = ec._Convert_statusModifyTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Convert_id(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_advertiserId(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertiserID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_convertAttribution(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertAttribution, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_convertDataType(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertDataType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_convertStatus(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_convertType(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_convertValue(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_createChannel(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateChannel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_createTime(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_data(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_externalAction(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalAction, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ExternalAction)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return res
}

// nolint: vetshadow
func (ec *executionContext) _Convert_externalActions(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalActions, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_name(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_status(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _Convert_statusModifyTime(ctx context.Context, field graphql.CollectedField, obj *Convert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Convert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusModifyTime, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var convertConnectionImplementors = []string{"ConvertConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConvertConnection(ctx context.Context, sel ast.SelectionSet, obj *ConvertConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, convertConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConvertConnection")
		case "edges":
			out.Values[i] = ec._ConvertConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pageInfo":
			out.Values[i] = ec._ConvertConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "aggregate":
			out.Values[i] = ec._ConvertConnection_aggregate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ConvertConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ConvertConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "ConvertConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ConvertEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ConvertEdge(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ConvertConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ConvertConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "ConvertConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._PageInfo(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ConvertConnection_aggregate(ctx context.Context, field graphql.CollectedField, obj *ConvertConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "ConvertConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(AggregateConvert)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._AggregateConvert(ctx, field.Selections, &res)
}

var convertEdgeImplementors = []string{"ConvertEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConvertEdge(ctx context.Context, sel ast.SelectionSet, obj *ConvertEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, convertEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConvertEdge")
		case "node":
			out.Values[i] = ec._ConvertEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "cursor":
			out.Values[i] = ec._ConvertEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ConvertEdge_node(ctx context.Context, field graphql.CollectedField, obj *ConvertEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "ConvertEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ConvertResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._ConvertResult(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ConvertEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ConvertEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "ConvertEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalID(res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createJSConvert":
			out.Values[i] = ec._Mutation_createJSConvert(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updateJSConvert":
			out.Values[i] = ec._Mutation_updateJSConvert(ctx, field)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deleteJSConvert":
			out.Values[i] = ec._Mutation_deleteJSConvert(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_createJSConvert(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_createJSConvert_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateJSConvert(rctx, args["input"].(*JSCreateInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(Convert)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._Convert(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_updateJSConvert(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_updateJSConvert_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJSConvert(rctx, args["input"].(*JSUpdateInput), args["where"].(*ConvertWhereInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(Convert)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._Convert(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteJSConvert(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteJSConvert_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJSConvert(rctx, args["where"].(*ConvertWhereInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Convert)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Convert(ctx, field.Selections, res)
}

var pageInfoImplementors = []string{"PageInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, pageInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "PageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "PageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "PageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "PageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "converts":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_converts(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_converts(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_converts_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Converts(rctx, args["where"].(*ConvertWhereInput), args["orderBy"].(*ConvertOrderByInput), args["skip"].(*int), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ConvertConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	return ec._ConvertConnection(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *User) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "advertiserID":
			out.Values[i] = ec._User_advertiserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _User_advertiserID(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertiserID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalID(res)
}

var xpathConvertImplementors = []string{"XpathConvert", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _XpathConvert(ctx context.Context, sel ast.SelectionSet, obj *XpathConvert) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, xpathConvertImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("XpathConvert")
		case "id":
			out.Values[i] = ec._XpathConvert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "advertiserID":
			out.Values[i] = ec._XpathConvert_advertiserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertAttribution":
			out.Values[i] = ec._XpathConvert_convertAttribution(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertDataType":
			out.Values[i] = ec._XpathConvert_convertDataType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertStatus":
			out.Values[i] = ec._XpathConvert_convertStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertType":
			out.Values[i] = ec._XpathConvert_convertType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertValue":
			out.Values[i] = ec._XpathConvert_convertValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertXpathUrl":
			out.Values[i] = ec._XpathConvert_convertXpathUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "convertXpathValue":
			out.Values[i] = ec._XpathConvert_convertXpathValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createChannel":
			out.Values[i] = ec._XpathConvert_createChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createTime":
			out.Values[i] = ec._XpathConvert_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "data":
			out.Values[i] = ec._XpathConvert_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalAction":
			out.Values[i] = ec._XpathConvert_externalAction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalActions":
			out.Values[i] = ec._XpathConvert_externalActions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._XpathConvert_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._XpathConvert_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "statusModifyTime":
			out.Values[i] = ec._XpathConvert_statusModifyTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_id(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_advertiserID(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertiserID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertAttribution(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertAttribution, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertDataType(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertDataType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertStatus(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertType(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertValue(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertXpathUrl(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertXpathURL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_convertXpathValue(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConvertXpathValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_createChannel(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateChannel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_createTime(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_data(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_externalAction(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalAction, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ExternalAction)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return res
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_externalActions(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalActions, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_name(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_status(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _XpathConvert_statusModifyTime(ctx context.Context, field graphql.CollectedField, obj *XpathConvert) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "XpathConvert",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusModifyTime, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalInt(res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer ec.Tracer.EndFieldExecution(ctx)
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _ConvertInput(ctx context.Context, sel ast.SelectionSet, obj *ConvertInput) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ConvertResult(ctx context.Context, sel ast.SelectionSet, obj *ConvertResult) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case Convert:
		return ec._Convert(ctx, sel, &obj)
	case *Convert:
		return ec._Convert(ctx, sel, obj)
	case AppConvert:
		return ec._AppConvert(ctx, sel, &obj)
	case *AppConvert:
		return ec._AppConvert(ctx, sel, obj)
	case XpathConvert:
		return ec._XpathConvert(ctx, sel, &obj)
	case *XpathConvert:
		return ec._XpathConvert(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case Convert:
		return ec._Convert(ctx, sel, &obj)
	case *Convert:
		return ec._Convert(ctx, sel, obj)
	case AppConvert:
		return ec._AppConvert(ctx, sel, &obj)
	case *AppConvert:
		return ec._AppConvert(ctx, sel, obj)
	case XpathConvert:
		return ec._XpathConvert(ctx, sel, &obj)
	case *XpathConvert:
		return ec._XpathConvert(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalConvertWhereInput(v interface{}) (ConvertWhereInput, error) {
	var it ConvertWhereInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalID(v)
				it.ID = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "name":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Name = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "advertiserID":
			var err error
			it.AdvertiserID, err = graphql.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createTime":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = graphql.UnmarshalTime(v)
				it.CreateTime = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "status":
			var err error
			var ptr1 int
			if v != nil {
				ptr1, err = graphql.UnmarshalInt(v)
				it.Status = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "externalAction":
			var err error
			var ptr1 ExternalAction
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.ExternalAction = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "convertTrack":
			var err error
			var ptr1 ConvertTrack
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.ConvertTrack = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalJSCreateInput(v interface{}) (JSCreateInput, error) {
	var it JSCreateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "externalAction":
			var err error
			err = (&it.ExternalAction).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalJSUpdateInput(v interface{}) (JSUpdateInput, error) {
	var it JSUpdateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `type Query {
  converts(where: ConvertWhereInput, orderBy: ConvertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConvertConnection!
}

type Mutation {
  createJSConvert(input: JSCreateInput): Convert!
  updateJSConvert(input: JSUpdateInput,  where: ConvertWhereInput ):Convert!
  deleteJSConvert(where: ConvertWhereInput ):Convert
}

enum ConvertOrderByInput {
  id_ASC
  id_DESC
  createdTime_ASC
  createdTime_DESC
}


type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
type AggregateConvert {
  count: Int!
}

# 转化跟踪方式
enum ConvertTrack {
  All
  JS
  Xpath
  API
}

# 转化目标
enum ExternalAction{
  Phone #1  电话拨打
  Form #2表单提交
  MapSearch #3地图搜索
  DownloadFinish  #4下载完成
  Button #按钮5button
  Xpath  #6xpath类型转换
  View #7  关键页面浏览
  Active #8激活
  DownloadStart  #9下载按钮download_start
  QQ  #10qq咨询
  Lottery #11抽奖
  Vote #12投票

}



interface Node {
  id: ID!
}


type Convert implements Node{
  id: ID!

  advertiserId: Int!
  convertAttribution: Int!
  convertDataType: Int!
  convertStatus: Int!
  convertType: Int!
  convertValue: Int!
  createChannel: Int! #   标志创建来源
  createTime: Time!
  data: String!
  externalAction: ExternalAction!
  externalActions: String!
  name: String!
  status: Int!
  statusModifyTime: Int!
}

type AppConvert implements Node {
  id: ID!

  advertiserID: Int!
  appId: String!  #游戏深度转化app_id
  convertAttribution: Int!
  convertDataType: Int!
  convertItunesId: Int!
  convertPackageName: String!
  convertStatus: Int!
  convertType: Int!
  convertValue: Int!
  createChannel: Int!  #   标志创建来源
  createTime: Time!
  data: String!
  downloadUrlStatus: Int!
  externalAction: ExternalAction!
  externalActions: String!
  name: String!
  status: Int!
  statusModifyTime: Int!
}

type XpathConvert implements Node{
  id: ID!

  advertiserID: Int!
  convertAttribution: Int!
  convertDataType: Int!
  convertStatus: Int!
  convertType: Int!
  convertValue: Int!
  convertXpathUrl: String!
  convertXpathValue: String!
  createChannel: Int!  #   标志创建来源
  createTime: Time!
  data: String!
  externalAction: ExternalAction!
  externalActions: String!
  name: String!
  status: Int!
  statusModifyTime: Int!
}

union ConvertResult = Convert | AppConvert | XpathConvert

interface ConvertInput{
  name: String!
  externalAction: ExternalAction
}

## input 不能使用 implements
input JSCreateInput {
  name: String!
  externalAction: ExternalAction!
}
input JSUpdateInput{
  name: String!
}
input ConvertWhereInput {
  id: ID
  name: String
  advertiserID: ID!
  createTime: Time
  status: Int
  externalAction: ExternalAction
  convertTrack: ConvertTrack  # 转化跟踪类型
}



type ConvertConnection {
  edges: [ConvertEdge!]!
  pageInfo: PageInfo!
  aggregate: AggregateConvert!
}
type ConvertEdge{
  node: ConvertResult!
  cursor: ID!
}

type User {
  id: ID!
  advertiserID: ID!
}

scalar Time
`},
)
